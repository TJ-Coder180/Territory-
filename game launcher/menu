import pygame
import sys

# Initialize
pygame.init()
pygame.mixer.init()
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Territory: Doomsday Landing")
clock = pygame.time.Clock()
font = pygame.font.SysFont("consolas", 36)

# Load WWII background image
background_img = pygame.image.load("ww2_background.jpg")
background_img = pygame.transform.scale(background_img, (WIDTH, HEIGHT))

# Load background music
pygame.mixer.music.load("ww2_theme.mp3")
pygame.mixer.music.set_volume(0.5)
pygame.mixer.music.play(-1)  # Loop forever

# Colors
WHITE = (255, 255, 255)
GRAY = (100, 100, 100)
DARK = (30, 30, 30)
HIGHLIGHT = (0, 200, 255)

# Language system
translations = {
    "en": {"title": "TERRITORY", "play": "Play", "settings": "Settings", "quit": "Quit", "volume": "Volume", "difficulty": "Difficulty", "back": "Back", "game_started": "Game Started!"},
    "es": {"title": "TERRITORIO", "play": "Jugar", "settings": "Opciones", "quit": "Salir", "volume": "Volumen", "difficulty": "Dificultad", "back": "Atrás", "game_started": "¡Juego Iniciado!"},
    "fr": {"title": "TERRITOIRE", "play": "Jouer", "settings": "Paramètres", "quit": "Quitter", "volume": "Volume", "difficulty": "Difficulté", "back": "Retour", "game_started": "Jeu démarré !"},
    "ja": {"title": "領土", "play": "プレイ", "settings": "設定", "quit": "終了", "volume": "音量", "difficulty": "難易度", "back": "戻る", "game_started": "ゲーム開始！"},
    "ar": {"title": "الإقليم", "play": "ابدأ", "settings": "الإعدادات", "quit": "خروج", "volume": "الصوت", "difficulty": "الصعوبة", "back": "رجوع", "game_started": "بدأت اللعبة!"}
}
current_lang = "en"

# Game settings
volume = 5
difficulty = "Normal"

# Button class
class Button:
    def __init__(self, text, x, y, w, h, callback):
        self.text = text
        self.rect = pygame.Rect(x, y, w, h)
        self.callback = callback
        self.hovered = False

    def draw(self, surface):
        color = HIGHLIGHT if self.hovered else GRAY
        pygame.draw.rect(surface, color, self.rect, border_radius=10)
        label = font.render(self.text, True, WHITE)
        surface.blit(label, (self.rect.x + 20, self.rect.y + 10))

    def check_hover(self, mouse_pos):
        self.hovered = self.rect.collidepoint(mouse_pos)

    def check_click(self, mouse_pos):
        if self.rect.collidepoint(mouse_pos):
            self.callback()

# Scene manager
class SceneManager:
    def __init__(self):
        self.scene = self.main_menu

    def main_menu(self):
        screen.blit(background_img, (0, 0))
        title = font.render(translations[current_lang]["title"], True, WHITE)
        screen.blit(title, (WIDTH//2 - title.get_width()//2, 80))
        for btn in main_buttons:
            btn.draw(screen)

    def settings_menu(self):
        screen.blit(background_img, (0, 0))
        label = font.render(translations[current_lang]["settings"], True, WHITE)
        screen.blit(label, (WIDTH//2 - label.get_width()//2, 60))

        vol_text = font.render(f"{translations[current_lang]['volume']}: {volume}", True, WHITE)
        diff_text = font.render(f"{translations[current_lang]['difficulty']}: {difficulty}", True, WHITE)
        screen.blit(vol_text, (280, 160))
        screen.blit(diff_text, (280, 220))

        for btn in settings_buttons + language_buttons:
            btn.draw(screen)

    def game_scene(self):
        screen.blit(background_img, (0, 0))
        label = font.render(translations[current_lang]["game_started"], True, WHITE)
        screen.blit(label, (WIDTH//2 - label.get_width()//2, HEIGHT//2))

    def switch(self, target):
        if target == "main":
            self.scene = self.main_menu
        elif target == "settings":
            self.scene = self.settings_menu
        elif target == "game":
            self.scene = self.game_scene

# Callbacks
def start_game():
    manager.switch("game")

def open_settings():
    manager.switch("settings")

def quit_game():
    pygame.quit()
    sys.exit()

def increase_volume():
    global volume
    if volume < 10:
        volume += 1
        pygame.mixer.music.set_volume(volume / 10)

def decrease_volume():
    global volume
    if volume > 0:
        volume -= 1
        pygame.mixer.music.set_volume(volume / 10)

def toggle_difficulty():
    global difficulty
    difficulty = "Hard" if difficulty == "Normal" else "Normal"

def back_to_menu():
    manager.switch("main")

def set_language(lang_code):
    global current_lang
    current_lang = lang_code
    update_buttons()

# Dynamic button text
def update_buttons():
    main_buttons[0].text = translations[current_lang]["play"]
    main_buttons[1].text = translations[current_lang]["settings"]
    main_buttons[2].text = translations[current_lang]["quit"]
    settings_buttons[3].text = translations[current_lang]["back"]

# Buttons
main_buttons = [
    Button(translations[current_lang]["play"], 300, 200, 200, 60, start_game),
    Button(translations[current_lang]["settings"], 300, 300, 200, 60, open_settings),
    Button(translations[current_lang]["quit"], 300, 400, 200, 60, quit_game)
]

settings_buttons = [
    Button("+", 500, 160, 40, 40, increase_volume),
    Button("-", 550, 160, 40, 40, decrease_volume),
    Button("Toggle", 500, 220, 120, 40, toggle_difficulty),
    Button(translations[current_lang]["back"], 300, 400, 200, 60, back_to_menu)
]

language_buttons = [
    Button("English", 100, 320, 120, 40, lambda: set_language("en")),
    Button("Español", 240, 320, 120, 40, lambda: set_language("es")),
    Button("Français", 380, 320, 120, 40, lambda: set_language("fr")),
    Button("日本語", 520, 320, 120, 40, lambda: set_language("ja")),
    Button("العربية", 660, 320, 120, 40, lambda: set_language("ar"))
]

manager = SceneManager()

# Main loop
while True:
    mouse_pos = pygame.mouse.get_pos()
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit_game()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                manager.switch("main")
        if event.type == pygame.MOUSEBUTTONDOWN:
            for btn in main_buttons + settings_buttons + language_buttons:
                btn.check_click(mouse_pos)

    for btn in main_buttons + settings_buttons + language_buttons:
        btn.check_hover(mouse_pos)

    manager.scene()
    pygame.display.flip()
    clock.tick(60)
